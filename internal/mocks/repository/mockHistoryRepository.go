// Code generated by MockGen. DO NOT EDIT.
// Source: historyRepository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ldmi3i/tinkoff-invest-bot/internal/entity"
)

// MockHistoryRepository is a mock of HistoryRepository interface.
type MockHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepositoryMockRecorder
}

// MockHistoryRepositoryMockRecorder is the mock recorder for MockHistoryRepository.
type MockHistoryRepositoryMockRecorder struct {
	mock *MockHistoryRepository
}

// NewMockHistoryRepository creates a new mock instance.
func NewMockHistoryRepository(ctrl *gomock.Controller) *MockHistoryRepository {
	mock := &MockHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepository) EXPECT() *MockHistoryRepositoryMockRecorder {
	return m.recorder
}

// ClearAndSaveAll mocks base method.
func (m *MockHistoryRepository) ClearAndSaveAll(history []entity.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAndSaveAll", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAndSaveAll indicates an expected call of ClearAndSaveAll.
func (mr *MockHistoryRepositoryMockRecorder) ClearAndSaveAll(history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAndSaveAll", reflect.TypeOf((*MockHistoryRepository)(nil).ClearAndSaveAll), history)
}

// FindAll mocks base method.
func (m *MockHistoryRepository) FindAll() ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockHistoryRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockHistoryRepository)(nil).FindAll))
}

// FindAllByFigis mocks base method.
func (m *MockHistoryRepository) FindAllByFigis(figis []string) ([]entity.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByFigis", figis)
	ret0, _ := ret[0].([]entity.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByFigis indicates an expected call of FindAllByFigis.
func (mr *MockHistoryRepositoryMockRecorder) FindAllByFigis(figis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByFigis", reflect.TypeOf((*MockHistoryRepository)(nil).FindAllByFigis), figis)
}
